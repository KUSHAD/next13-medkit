generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Staff {
  id                   String            @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  mobileNumber         String            @unique
  isTrashed            Boolean           @default(false)
  createdAt            DateTime          @default(now())
  addedDoctor          Doctor[]
  addedSchedule        Schedule[]
  addedProcedure       Procedure[]
  addedAppointment     Appointment[]
  addedBill            Bill[]
  addedPayment         Payment[]
  addedPartPayment     PartPayment[]
  addedAttendance      Attendance[]
  addedExpenditureType ExpenditureType[]
  addedExpenditure     Expenditure[]
  addedExpenditureDocs ExpenditureDocs[]
}

model Doctor {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  specialization TREATMENT     @default(DENTAL)
  isTrashed      Boolean       @default(false)
  addedBy        String        @db.ObjectId
  createdAt      DateTime      @default(now())
  staff          Staff         @relation(fields: [addedBy], references: [id])
  schedules      Schedule[]
  appointment    Appointment[]
  attendance     Attendance[]
}

model Schedule {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  day       DAY      @default(MONDAY)
  slot      SLOT     @default(MORNING)
  doctorId  String   @db.ObjectId
  addedBy   String   @db.ObjectId
  createdAt DateTime @default(now())
  staff     Staff    @relation(fields: [addedBy], references: [id])
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
}

model Procedure {
  id                              String    @id @default(auto()) @map("_id") @db.ObjectId
  name                            String
  treatment                       TREATMENT @default(DENTAL)
  rate                            Int
  doctorRate                      Int
  officeRate                      Int
  technicianRate                  Int
  variableRate                    Boolean   @default(false)
  isDoctorRatePercentageValue     Boolean   @default(false)
  isOfficeRatePercentageValue     Boolean   @default(false)
  isTechnicianRatePercentageValue Boolean   @default(false)
  isTrashed                       Boolean   @default(false)
  addedBy                         String    @db.ObjectId
  createdAt                       DateTime  @default(now())
  staff                           Staff     @relation(fields: [addedBy], references: [id])
  bills                           Bill[]
}

model Appointment {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  dateOfAppointment    DateTime
  name                 String
  mobile               String
  isPartPaymentEnabled Boolean       @default(false)
  doctorID             String        @db.ObjectId
  slot                 SLOT          @default(MORNING)
  problemType          TREATMENT     @default(DENTAL)
  description          String?       @default("")
  address              String?       @default("")
  isArrived            Boolean       @default(false)
  isBilled             Boolean       @default(false)
  addedBy              String        @db.ObjectId
  createdAt            DateTime      @default(now())
  doctor               Doctor        @relation(fields: [doctorID], references: [id])
  staff                Staff         @relation(fields: [addedBy], references: [id])
  payment              Payment?
  bills                Bill[]
  partPayment          PartPayment[]
}

model Bill {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  procedureID   String       @db.ObjectId
  appointmentID String?      @db.ObjectId
  finalValue    Int
  quantity      Int
  paymentID     String?      @db.ObjectId
  addedBy       String       @db.ObjectId
  createdAt     DateTime     @default(now())
  staff         Staff        @relation(fields: [addedBy], references: [id])
  appointment   Appointment? @relation(fields: [appointmentID], references: [id])
  procedure     Procedure    @relation(fields: [procedureID], references: [id])
  payment       Payment?     @relation(fields: [paymentID], references: [id])
}

model Payment {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  appointmentID        String        @unique @db.ObjectId
  isPartPaymentEnabled Boolean       @default(false)
  total                Int
  dateOfPayment        DateTime
  addedBy              String        @db.ObjectId
  createdAt            DateTime      @default(now())
  bills                Bill[]
  appointment          Appointment   @relation(fields: [appointmentID], references: [id])
  staff                Staff         @relation(fields: [addedBy], references: [id])
  partPayment          PartPayment[]
}

model PartPayment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  paymentID     String      @db.ObjectId
  appointmentID String      @db.ObjectId
  amount        Int
  dateOfPayment DateTime
  addedBy       String      @db.ObjectId
  createdAt     DateTime    @default(now())
  staff         Staff       @relation(fields: [addedBy], references: [id])
  payment       Payment     @relation(fields: [paymentID], references: [id])
  appointment   Appointment @relation(fields: [appointmentID], references: [id])
}

model Attendance {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  doctorID         String   @db.ObjectId
  dateOfAttendance DateTime
  addedBy          String   @db.ObjectId
  createdAt        DateTime @default(now())
  doctor           Doctor   @relation(fields: [doctorID], references: [id])
  staff            Staff    @relation(fields: [addedBy], references: [id])
}

model ExpenditureType {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  amount      Int
  addedBy     String        @db.ObjectId
  isTrashed   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  staff       Staff         @relation(fields: [addedBy], references: [id])
  expenditure Expenditure[]
}

model Expenditure {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  amount            Int
  modeOfPayment     MODE_OF_PAYMENT   @default(CASH)
  name              String
  mobileNumber      String
  chequeNo          String?           @default("")
  bankTransactionID String?           @default("")
  upiID             String?           @default("")
  issueDate         DateTime
  description       String?           @default("")
  addedBy           String            @db.ObjectId
  expenditureTypeId String            @db.ObjectId
  createdAt         DateTime          @default(now())
  staff             Staff             @relation(fields: [addedBy], references: [id])
  expenditureType   ExpenditureType   @relation(fields: [expenditureTypeId], references: [id])
  ExpenditureDocs   ExpenditureDocs[]
}

model ExpenditureDocs {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  docSrc        String
  description   String
  expenditureID String      @db.ObjectId
  addedBy       String      @db.ObjectId
  createdAt     DateTime    @default(now())
  expediture    Expenditure @relation(fields: [expenditureID], references: [id])
  staff         Staff       @relation(fields: [addedBy], references: [id])
}

enum DAY {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum SLOT {
  MORNING
  EVENING
}

enum TREATMENT {
  DENTAL
  OPTICS
}

enum MODE_OF_PAYMENT {
  CASH
  CHEQUE
  UPI
  BANK_TRANSFER
}
