// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(25)
  mobileNumber String        @unique @db.Char(10)
  isTrashed    Boolean?      @default(false)
  createdAt    DateTime?     @default(now())
  appointment  Appointment[]
  payment      Payment[]
}

model Staff {
  id           Int       @id @default(autoincrement())
  name         String    @db.VarChar(25)
  mobileNumber String    @unique @db.Char(10)
  isTrashed    Boolean?  @default(false)
  createdAt    DateTime? @default(now())
}

model Appointment {
  id                Int       @id @default(autoincrement())
  dateOfAppointment DateTime
  userId            Int
  slot              SLOT      @default(MORNING)
  problemType       TREATMENT @default(DENTAL)
  description       String?   @db.VarChar(250)
  address           String?   @db.VarChar(250)
  isTrashed         Boolean?  @default(false)
  createdAt         DateTime? @default(now())
  user              User      @relation(fields: [userId], references: [id], onDelete: NoAction)
  doctorID          Int?
  doctor            Doctor?   @relation(fields: [doctorID], references: [id], onDelete: NoAction)
}

model Doctor {
  id             Int           @id @default(autoincrement())
  name           String        @db.VarChar(25)
  specialization TREATMENT     @default(DENTAL)
  isTrashed      Boolean?      @default(false)
  createdAt      DateTime?     @default(now())
  schedules      Schedule[]
  appointment    Appointment[]
  attendance     Attendance[]
}

model Schedule {
  id        Int       @id @default(autoincrement())
  day       DAY       @default(MONDAY)
  slot      SLOT      @default(MORNING)
  doctorId  Int
  isTrashed Boolean?  @default(false)
  createdAt DateTime? @default(now())
  doctor    Doctor    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Procedure {
  id                             Int       @id @default(autoincrement())
  name                           String    @db.VarChar(25)
  treatment                      TREATMENT @default(DENTAL)
  rate                           Int
  doctorRate                     Int
  officeRate                     Int
  technicianRate                 Int
  variableRate                   Boolean?  @default(false)
  isDoctorRatePercetageValue     Boolean?  @default(false)
  isOfficeRatePercetageValue     Boolean?  @default(false)
  isTechnicianRatePercetageValue Boolean?  @default(false)
  isTrashed                      Boolean?  @default(false)
  createdAt                      DateTime? @default(now())
  Bill                           Bill[]
}

model Bill {
  id          Int       @id @default(autoincrement())
  procedureID Int
  finalValue  Int
  paymentId   Int
  isTrashed   Boolean?  @default(false)
  createdAt   DateTime? @default(now())
  procedure   Procedure @relation(fields: [procedureID], references: [id], onDelete: NoAction)
  payment     Payment   @relation(fields: [paymentId], references: [id], onDelete: NoAction)
}

model Payment {
  id            Int           @id @default(autoincrement())
  bills         Bill[]
  isPartPayment Boolean?      @default(false)
  partPaymentId Int?
  userId        Int
  isTrashed     Boolean?      @default(false)
  createdAt     DateTime?     @default(now())
  partPayment   PartPayment[]
  user          User          @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model PartPayment {
  id        Int       @id @default(autoincrement())
  ammount   Int
  date      DateTime? @default(now())
  paymentId Int
  isTrashed Boolean?  @default(false)
  createdAt DateTime? @default(now())
  payment   Payment   @relation(fields: [paymentId], references: [id])
}

model Attendance {
  id        Int       @id @default(autoincrement())
  doctorId  Int
  date      DateTime?
  createdAt DateTime? @default(now())
  doctor    Doctor    @relation(fields: [doctorId], references: [id])
}

model ExpenditureType {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(25)
  price       Int
  isTrashed   Boolean?      @default(false)
  createdAt   DateTime?     @default(now())
  Expenditure Expenditure[]
}

model Expenditure {
  id                Int             @id @default(autoincrement())
  expenditureTypeId Int
  finalPrice        Int
  modeOfPayment     MODE_OF_PAYMENT @default(CASH)
  cashContact       String?         @db.Char(10)
  chequeNo          String?
  ddNo              String?
  bankName          String?
  upiID             String?
  issueDate         DateTime?
  description       String?         @db.VarChar(250)
  isTrashed         Boolean?        @default(false)
  createdAt         DateTime?       @default(now())
  purpose           ExpenditureType @relation(fields: [expenditureTypeId], references: [id])
}

enum DAY {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum SLOT {
  MORNING
  EVENING
}

enum TREATMENT {
  DENTAL
  OPTICS
}

enum MODE_OF_PAYMENT {
  CASH
  CHEQUE
  DEMAND_DRAFT
  UPI
  BANK_TRANSFER
}
